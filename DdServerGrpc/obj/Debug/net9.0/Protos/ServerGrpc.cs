// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/server.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace DdServerGrpc {
  public static partial class MetricsService
  {
    static readonly string __ServiceName = "DdServerGrpc.MetricsService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DdServerGrpc.MetricsRequest> __Marshaller_DdServerGrpc_MetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DdServerGrpc.MetricsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DdServerGrpc.MetricsResponse> __Marshaller_DdServerGrpc_MetricsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DdServerGrpc.MetricsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DdServerGrpc.MetricsRequest, global::DdServerGrpc.MetricsResponse> __Method_StreamMetrics = new grpc::Method<global::DdServerGrpc.MetricsRequest, global::DdServerGrpc.MetricsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamMetrics",
        __Marshaller_DdServerGrpc_MetricsRequest,
        __Marshaller_DdServerGrpc_MetricsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::DdServerGrpc.ServerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MetricsService</summary>
    [grpc::BindServiceMethod(typeof(MetricsService), "BindService")]
    public abstract partial class MetricsServiceBase
    {
      /// <summary>
      /// Streams server metrics (CPU, RAM, Disk, etc.)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamMetrics(global::DdServerGrpc.MetricsRequest request, grpc::IServerStreamWriter<global::DdServerGrpc.MetricsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(MetricsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StreamMetrics, serviceImpl.StreamMetrics).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MetricsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_StreamMetrics, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::DdServerGrpc.MetricsRequest, global::DdServerGrpc.MetricsResponse>(serviceImpl.StreamMetrics));
    }

  }
  public static partial class ServiceControlManager
  {
    static readonly string __ServiceName = "DdServerGrpc.ServiceControlManager";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DdServerGrpc.ServiceRequest> __Marshaller_DdServerGrpc_ServiceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DdServerGrpc.ServiceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DdServerGrpc.ServiceResponse> __Marshaller_DdServerGrpc_ServiceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DdServerGrpc.ServiceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::DdServerGrpc.ServiceStatusResponse> __Marshaller_DdServerGrpc_ServiceStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DdServerGrpc.ServiceStatusResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DdServerGrpc.ServiceRequest, global::DdServerGrpc.ServiceResponse> __Method_StartService = new grpc::Method<global::DdServerGrpc.ServiceRequest, global::DdServerGrpc.ServiceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartService",
        __Marshaller_DdServerGrpc_ServiceRequest,
        __Marshaller_DdServerGrpc_ServiceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DdServerGrpc.ServiceRequest, global::DdServerGrpc.ServiceResponse> __Method_StopService = new grpc::Method<global::DdServerGrpc.ServiceRequest, global::DdServerGrpc.ServiceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopService",
        __Marshaller_DdServerGrpc_ServiceRequest,
        __Marshaller_DdServerGrpc_ServiceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DdServerGrpc.ServiceRequest, global::DdServerGrpc.ServiceResponse> __Method_RestartService = new grpc::Method<global::DdServerGrpc.ServiceRequest, global::DdServerGrpc.ServiceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RestartService",
        __Marshaller_DdServerGrpc_ServiceRequest,
        __Marshaller_DdServerGrpc_ServiceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::DdServerGrpc.ServiceRequest, global::DdServerGrpc.ServiceStatusResponse> __Method_GetServiceStatus = new grpc::Method<global::DdServerGrpc.ServiceRequest, global::DdServerGrpc.ServiceStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceStatus",
        __Marshaller_DdServerGrpc_ServiceRequest,
        __Marshaller_DdServerGrpc_ServiceStatusResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::DdServerGrpc.ServerReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of ServiceControlManager</summary>
    [grpc::BindServiceMethod(typeof(ServiceControlManager), "BindService")]
    public abstract partial class ServiceControlManagerBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DdServerGrpc.ServiceResponse> StartService(global::DdServerGrpc.ServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DdServerGrpc.ServiceResponse> StopService(global::DdServerGrpc.ServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DdServerGrpc.ServiceResponse> RestartService(global::DdServerGrpc.ServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::DdServerGrpc.ServiceStatusResponse> GetServiceStatus(global::DdServerGrpc.ServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ServiceControlManagerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StartService, serviceImpl.StartService)
          .AddMethod(__Method_StopService, serviceImpl.StopService)
          .AddMethod(__Method_RestartService, serviceImpl.RestartService)
          .AddMethod(__Method_GetServiceStatus, serviceImpl.GetServiceStatus).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ServiceControlManagerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_StartService, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DdServerGrpc.ServiceRequest, global::DdServerGrpc.ServiceResponse>(serviceImpl.StartService));
      serviceBinder.AddMethod(__Method_StopService, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DdServerGrpc.ServiceRequest, global::DdServerGrpc.ServiceResponse>(serviceImpl.StopService));
      serviceBinder.AddMethod(__Method_RestartService, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DdServerGrpc.ServiceRequest, global::DdServerGrpc.ServiceResponse>(serviceImpl.RestartService));
      serviceBinder.AddMethod(__Method_GetServiceStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DdServerGrpc.ServiceRequest, global::DdServerGrpc.ServiceStatusResponse>(serviceImpl.GetServiceStatus));
    }

  }
}
#endregion
